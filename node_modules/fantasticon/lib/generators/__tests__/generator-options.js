"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var generator_options_1 = require("../generator-options");
var misc_1 = require("../../types/misc");
var codepoints_1 = require("../../utils/codepoints");
var template_1 = require("../../utils/template");
var getCodepointsMock = codepoints_1.getCodepoints;
var getDefaultTemplatePathMock = template_1.getDefaultTemplatePath;
jest.mock('../../types/misc', function () { return ({
    FontAssetType: { TTF: 'TTF', EOT: 'eot' },
    OtherAssetType: { CSS: 'css', HTML: 'html' },
    ASSET_TYPES: { ttf: 'ttf', eot: 'eot', css: 'css', html: 'html' }
}); });
jest.mock('../../utils/template', function () { return ({
    getDefaultTemplatePath: jest.fn(function (assetType) { return "/default-template-" + assetType + ".hbs"; })
}); });
jest.mock('../../utils/codepoints', function () { return ({
    getCodepoints: jest.fn(function () { return ({ __mock: 'processed-codepoint__' }); })
}); });
describe('Font generator options', function () {
    beforeEach(function () {
        getCodepointsMock.mockClear();
        getDefaultTemplatePathMock.mockClear();
    });
    test('`prefillOptions` correctly extends default values for each type and prefills missing ones', function () {
        expect(generator_options_1.prefillOptions(['html', 'ttf', 'eot', 'css', 'foo'], { html: { a: 'a', c: 'c', baseVal: 'custom' }, ttf: { foo: 'bar' } }, function (key) { return ({ baseVal: key }); })).toEqual({
            ttf: { baseVal: 'ttf', foo: 'bar' },
            eot: { baseVal: 'eot' },
            css: { baseVal: 'css' },
            html: { baseVal: 'custom', a: 'a', c: 'c' },
            foo: { baseVal: 'foo' }
        });
    });
    test('`prefillOptions` correctly replaces default values when handling primitives', function () {
        expect(generator_options_1.prefillOptions(['html', 'ttf', 'foo', 'eot'], { html: 'custom-html-val', ttf: 'custom-ttf-val' }, function (key) { return "default-" + key + "-val"; })).toEqual({
            html: 'custom-html-val',
            ttf: 'custom-ttf-val',
            eot: 'default-eot-val',
            foo: 'default-foo-val'
        });
    });
    test('`getGeneratorOptions` produces usable font generator options including given `assets` and sanitised `formatOptions`', function () {
        var outputDir = '/dev/null';
        var formatOptions = { eot: { foo: 'bar' } };
        var pathOptions = { eot: 'test' };
        var options = {
            __mock: 'assetsMap__',
            outputDir: outputDir,
            formatOptions: formatOptions,
            pathOptions: pathOptions
        };
        var assets = { __mock: 'runnerOptions__' };
        var generatorOptions = generator_options_1.getGeneratorOptions(options, assets);
        expect(generatorOptions).toEqual(__assign(__assign({}, options), { assets: assets, codepoints: { __mock: 'processed-codepoint__' }, formatOptions: {
                ttf: {},
                eot: { foo: 'bar' },
                css: {},
                html: {}
            }, templates: {
                css: '/default-template-css.hbs',
                html: '/default-template-html.hbs'
            } }));
        expect(Object.keys(generatorOptions.formatOptions)).toHaveLength(Object.keys(misc_1.ASSET_TYPES).length);
        expect(Object.keys(generatorOptions.templates)).toHaveLength(Object.keys(misc_1.OtherAssetType).length);
    });
    test('`getGeneratorOptions` calls `getCodepoints` with input assets and codepoints', function () {
        var codepointsIn = { foo: 'bar' };
        var options = { codepoints: codepointsIn };
        var assets = {};
        generator_options_1.getGeneratorOptions(options, assets);
        expect(getCodepointsMock).toHaveBeenCalledTimes(1);
        expect(getCodepointsMock).toHaveBeenCalledWith(assets, codepointsIn);
    });
    test('`getGeneratorOptions` correctly processes templates option', function () {
        var options = { templates: { html: 'user-template.hbs' } };
        var assets = {};
        expect(generator_options_1.getGeneratorOptions(options, assets).templates).toEqual({
            css: '/default-template-css.hbs',
            html: 'user-template.hbs'
        });
    });
});
//# sourceMappingURL=generator-options.js.map
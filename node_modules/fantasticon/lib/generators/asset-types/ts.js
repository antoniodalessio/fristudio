"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
var change_case_1 = require("change-case");
var generateEnumKeys = function (assetKeys) {
    return assetKeys
        .map(function (name) {
        var _a;
        var enumName = change_case_1.pascalCase(name);
        var prefix = enumName.match(/^\d/) ? 'i' : '';
        return _a = {},
            _a[name] = "" + prefix + enumName,
            _a;
    })
        .reduce(function (prev, curr) { return Object.assign(prev, curr); }, {});
};
var generateEnums = function (enumName, enumKeys, quote) {
    if (quote === void 0) { quote = '"'; }
    return __spreadArrays([
        "export enum " + enumName + " {"
    ], Object.entries(enumKeys).map(function (_a) {
        var enumValue = _a[0], enumKey = _a[1];
        return "  " + enumKey + " = " + quote + enumValue + quote + ",";
    }), [
        '}\n'
    ]).join('\n');
};
var generateConstant = function (_a) {
    var codepointsName = _a.codepointsName, enumName = _a.enumName, literalIdName = _a.literalIdName, literalKeyName = _a.literalKeyName, enumKeys = _a.enumKeys, codepoints = _a.codepoints, _b = _a.quote, quote = _b === void 0 ? '"' : _b, _c = _a.kind, kind = _c === void 0 ? {} : _c;
    var varType = ': Record<string, string>';
    if (kind["enum"]) {
        varType = ": { [key in " + enumName + "]: string }";
    }
    else if (kind.literalId) {
        varType = ": { [key in " + literalIdName + "]: string }";
    }
    else if (kind.literalKey) {
        varType = ": { [key in " + literalKeyName + "]: string }";
    }
    return [
        "export const " + codepointsName + varType + " = {",
        Object.entries(enumKeys)
            .map(function (_a) {
            var enumValue = _a[0], enumKey = _a[1];
            var key = kind["enum"]
                ? "[" + enumName + "." + enumKey + "]"
                : "" + quote + enumValue + quote;
            return "  " + key + ": " + quote + codepoints[enumValue] + quote + ",";
        })
            .join('\n'),
        '};\n'
    ].join('\n');
};
var generateStringLiterals = function (typeName, literals, quote) {
    if (quote === void 0) { quote = '"'; }
    return [
        "export type " + typeName + " =",
        literals.map(function (key) { return "  | " + quote + key + quote; }).join('\n') + ";\n"
    ].join('\n');
};
var generator = {
    generate: function (_a) {
        var name = _a.name, codepoints = _a.codepoints, assets = _a.assets, _b = _a.formatOptions, ts = (_b === void 0 ? {} : _b).ts;
        return __awaiter(void 0, void 0, void 0, function () {
            var quote, generateKind, enumName, codepointsName, literalIdName, literalKeyName, names, enumKeys, stringLiteralId, stringLiteralKey, enums, constant;
            var _c;
            return __generator(this, function (_d) {
                quote = Boolean(ts === null || ts === void 0 ? void 0 : ts.singleQuotes) ? "'" : '"';
                generateKind = (Boolean((_c = ts === null || ts === void 0 ? void 0 : ts.types) === null || _c === void 0 ? void 0 : _c.length)
                    ? ts.types
                    : ['enum', 'constant', 'literalId', 'literalKey'])
                    .map(function (kind) {
                    var _a;
                    return (_a = {}, _a[kind] = true, _a);
                })
                    .reduce(function (prev, curr) { return Object.assign(prev, curr); }, {});
                enumName = change_case_1.pascalCase(name);
                codepointsName = change_case_1.constantCase(name) + "_CODEPOINTS";
                literalIdName = change_case_1.pascalCase(name) + "Id";
                literalKeyName = change_case_1.pascalCase(name) + "Key";
                names = { enumName: enumName, codepointsName: codepointsName, literalIdName: literalIdName, literalKeyName: literalKeyName };
                enumKeys = generateEnumKeys(Object.keys(assets));
                stringLiteralId = generateKind.literalId
                    ? generateStringLiterals(literalIdName, Object.keys(enumKeys), quote)
                    : null;
                stringLiteralKey = generateKind.literalKey
                    ? generateStringLiterals(literalKeyName, Object.values(enumKeys), quote)
                    : null;
                enums = generateKind["enum"]
                    ? generateEnums(enumName, enumKeys, quote)
                    : null;
                constant = generateKind.constant
                    ? generateConstant(__assign(__assign({}, names), { enumKeys: enumKeys,
                        codepoints: codepoints,
                        quote: quote, kind: generateKind }))
                    : null;
                return [2 /*return*/, [stringLiteralId, stringLiteralKey, enums, constant]
                        .filter(Boolean)
                        .join('\n')];
            });
        });
    }
};
exports["default"] = generator;
//# sourceMappingURL=ts.js.map
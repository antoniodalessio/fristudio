"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var ts_1 = __importDefault(require("../ts"));
var path_1 = __importDefault(require("path"));
var mockAssets = {
    foo: {
        id: 'foo',
        absolutePath: '/path/there/foo.svg',
        relativePath: '../there/foo.svg'
    },
    bar: {
        id: 'bar',
        absolutePath: '/path/there/bar.svg',
        relativePath: '../there/bar.svg'
    }
};
var mockCodepoints = { foo: 4265, bar: 1231 };
var mockOptions = {
    name: 'my-icons-set',
    assets: mockAssets,
    codepoints: mockCodepoints,
    inputDir: path_1["default"].join(path_1["default"].dirname(__filename), 'fixtures'),
    outputDir: '/dev/null'
};
var cleanWhiteSpace = function (subject) {
    return subject.replace(/\n+/, '').replace(/\s+/g, ' ');
};
var getCleanGen = function (options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = cleanWhiteSpace;
                    return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), options), null)];
                case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent())])];
            }
        });
    });
};
describe('`TS` asset generator', function () {
    test('renders expected TypeScript module content', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, ts_1["default"].generate(mockOptions, null)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('correctly renders type declaration', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, getCleanGen()];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toContain('export type MyIconsSetId = | "foo" | "bar";');
                    return [2 /*return*/];
            }
        });
    }); });
    test('correctly enum declaration', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, getCleanGen()];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toContain('export enum MyIconsSet { Foo = "foo", Bar = "bar", }');
                    return [2 /*return*/];
            }
        });
    }); });
    test('correctly codepoints declaration', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, getCleanGen()];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toContain('export const MY_ICONS_SET_CODEPOINTS: { [key in MyIconsSet]: string }' +
                        ' = { [MyIconsSet.Foo]: "4265", [MyIconsSet.Bar]: "1231", };');
                    return [2 /*return*/];
            }
        });
    }); });
    test('generates single quotes if format option passed', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { formatOptions: { ts: { singleQuotes: true } } }), null)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('generates no key string literal type if option passed like that', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { formatOptions: { ts: { types: ['constant', 'enum'] } } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).not.toContain('export type MyIconsSetKey = | "Foo" | "Bar";');
                    expect(cleanResult).not.toContain('export type MyIconsSetId = | "foo" | "bar";');
                    return [2 /*return*/];
            }
        });
    }); });
    test('generates constant with literalId if no enum generated', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { formatOptions: { ts: { types: ['constant', 'literalId'] } } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).toContain('export const MY_ICONS_SET_CODEPOINTS: { [key in MyIconsSetId]: string }');
                    expect(cleanResult).not.toContain('export type MyIconsSetKey = | "Foo" | "Bar";');
                    expect(cleanResult).not.toContain('export enum MyIconsSet');
                    return [2 /*return*/];
            }
        });
    }); });
    test('generates constant with literalKey if no enum generated', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { formatOptions: { ts: { types: ['constant', 'literalKey'] } } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).toContain('export const MY_ICONS_SET_CODEPOINTS: { [key in MyIconsSetKey]: string }');
                    expect(cleanResult).not.toContain('export type MyIconsSetId = | "foo" | "bar";');
                    expect(cleanResult).not.toContain('export enum MyIconsSet');
                    return [2 /*return*/];
            }
        });
    }); });
    test('generates constant only', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { formatOptions: { ts: { types: ['constant'] } } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).toContain('export const MY_ICONS_SET_CODEPOINTS: Record<string, string>');
                    expect(cleanResult).not.toContain('export type MyIconsSetId = | "foo" | "bar";');
                    expect(cleanResult).not.toContain('export enum MyIconsSet');
                    return [2 /*return*/];
            }
        });
    }); });
    test('prevents enum keys that start with digits', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { assets: { 1234: mockAssets.foo, 5678: mockAssets.bar } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).toContain('export type MyIconsSetId = | "1234" | "5678";');
                    expect(cleanResult).toContain('export type MyIconsSetKey = | "i1234" | "i5678";');
                    expect(cleanResult).toContain('export enum MyIconsSet { i1234 = "1234", i5678 = "5678", }');
                    return [2 /*return*/];
            }
        });
    }); });
    test('prevents enum keys that start with digits when digits and chars', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, cleanResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ts_1["default"].generate(__assign(__assign({}, mockOptions), { assets: {
                            '1234asdf': mockAssets.foo,
                            '5678ab': mockAssets.bar,
                            foo: mockAssets.foo
                        } }), null)];
                case 1:
                    result = _a.sent();
                    cleanResult = cleanWhiteSpace(result);
                    expect(result).toMatchSnapshot();
                    expect(cleanResult).toContain('export type MyIconsSetId = | "1234asdf" | "5678ab" | "foo";');
                    expect(cleanResult).toContain('export type MyIconsSetKey = | "i1234asdf" | "i5678ab" | "Foo";');
                    expect(cleanResult).toContain('export enum MyIconsSet { i1234asdf = "1234asdf", i5678ab = "5678ab", Foo = "foo", }');
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=ts.js.map
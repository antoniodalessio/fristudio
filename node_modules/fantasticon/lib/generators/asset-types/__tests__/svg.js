"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var svgicons2svgfont_1 = __importDefault(require("svgicons2svgfont"));
var misc_1 = require("../../../types/misc");
var svg_1 = __importDefault(require("../svg"));
var SVGIcons2SVGFontStream = svgicons2svgfont_1["default"];
jest.mock('fs', function () { return ({
    createReadStream: function (filepath) { return ({
        content: "content->" + filepath
    }); }
}); });
jest.mock('svgicons2svgfont', function () {
    var EventEmitter = require('events').EventEmitter;
    var MockStream = /** @class */ (function () {
        function MockStream() {
            this.events = new EventEmitter();
            this.content = '';
        }
        MockStream.prototype.write = function (chunk) {
            this.events.emit('data', Buffer.from("processed->" + chunk.content + "$"));
            return this;
        };
        MockStream.prototype.on = function (event, callback) {
            this.events.on(event, callback);
            return this;
        };
        MockStream.prototype.end = function () {
            this.events.emit('end');
            return this;
        };
        return MockStream;
    }());
    return jest.fn(function () { return new MockStream(); });
});
var mockOptions = function (svgOptions) {
    var _a;
    if (svgOptions === void 0) { svgOptions = { __mock: 'options__' }; }
    return ({
        name: 'foo',
        fontHeight: 1,
        descent: 2,
        normalize: false,
        formatOptions: (_a = {}, _a[misc_1.FontAssetType.SVG] = svgOptions, _a),
        codepoints: { foo: 1, bar: 1 },
        assets: {
            foo: { id: 'foo', absolutePath: '/root/foo.svg' },
            bar: { id: 'bar', absolutePath: '/root/bar.svg' }
        }
    });
};
describe('`SVG` font generator', function () {
    beforeEach(function () {
        SVGIcons2SVGFontStream.mockClear();
    });
    test('resolves with the result of the completed `SVGIcons2SVGFontStream`', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, svg_1["default"].generate(mockOptions(), null)];
                case 1:
                    result = _a.sent();
                    expect(SVGIcons2SVGFontStream).toHaveBeenCalledTimes(1);
                    expect(SVGIcons2SVGFontStream).toHaveBeenCalledWith({
                        descent: 2,
                        fontHeight: 1,
                        fontName: 'foo',
                        log: expect.any(Function),
                        normalize: false,
                        __mock: 'options__'
                    });
                    expect(result).toBe('processed->content->/root/foo.svg$processed->content->/root/bar.svg$');
                    return [2 /*return*/];
            }
        });
    }); });
    test('passes correctly format options to `SVGIcons2SVGFontStream`', function () { return __awaiter(void 0, void 0, void 0, function () {
        var log, formatOptions;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    log = function () { return null; };
                    formatOptions = { descent: 5, fontHeight: 6, log: log };
                    return [4 /*yield*/, svg_1["default"].generate(mockOptions(formatOptions), null)];
                case 1:
                    _a.sent();
                    expect(SVGIcons2SVGFontStream).toHaveBeenCalledTimes(1);
                    expect(SVGIcons2SVGFontStream).toHaveBeenCalledWith({
                        descent: 5,
                        fontHeight: 6,
                        fontName: 'foo',
                        log: log,
                        normalize: false
                    });
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=svg.js.map
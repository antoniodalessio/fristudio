"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.generateFonts = exports.sanitiseOptions = void 0;
var constants_1 = require("../constants");
var assets_1 = require("../utils/assets");
var generator_options_1 = require("../generators/generator-options");
var config_parser_1 = require("./config-parser");
var generators_1 = require("../generators");
exports.sanitiseOptions = function (userOptions) {
    return config_parser_1.parseConfig(__assign(__assign({}, constants_1.DEFAULT_OPTIONS), userOptions));
};
exports.generateFonts = function (userOptions, mustWrite) {
    if (mustWrite === void 0) { mustWrite = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var options, outputDir, inputDir, assetsIn, generatorOptions, assetsOut, writeResults, _a, codepoints;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, exports.sanitiseOptions(userOptions)];
                case 1:
                    options = _b.sent();
                    outputDir = options.outputDir, inputDir = options.inputDir;
                    if (!inputDir) {
                        throw new Error('You must specify an input directory');
                    }
                    if (mustWrite && !outputDir) {
                        throw new Error('You must specify an output directory');
                    }
                    return [4 /*yield*/, assets_1.loadAssets(options.inputDir)];
                case 2:
                    assetsIn = _b.sent();
                    generatorOptions = generator_options_1.getGeneratorOptions(options, assetsIn);
                    return [4 /*yield*/, generators_1.generateAssets(generatorOptions)];
                case 3:
                    assetsOut = _b.sent();
                    if (!outputDir) return [3 /*break*/, 5];
                    return [4 /*yield*/, assets_1.writeAssets(assetsOut, options)];
                case 4:
                    _a = _b.sent();
                    return [3 /*break*/, 6];
                case 5:
                    _a = [];
                    _b.label = 6;
                case 6:
                    writeResults = _a;
                    codepoints = generatorOptions.codepoints;
                    return [2 /*return*/, {
                            options: options,
                            assetsIn: assetsIn,
                            assetsOut: assetsOut,
                            writeResults: writeResults,
                            codepoints: codepoints
                        }];
            }
        });
    });
};
//# sourceMappingURL=runner.js.map
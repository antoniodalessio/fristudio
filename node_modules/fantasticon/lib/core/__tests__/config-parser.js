"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var config_parser_1 = require("../config-parser");
var fs_async_1 = require("../../utils/fs-async");
var checkPathMock = fs_async_1.checkPath;
jest.mock('../../utils/fs-async', function () { return ({ checkPath: jest.fn() }); });
jest.mock('../../types/misc', function () { return ({
    FontAssetType: { svg: 'a', eot: 'b' },
    OtherAssetType: { svg: 'c', eot: 'd' }
}); });
var mockConfig = {
    inputDir: '/root',
    outputDir: '/root',
    name: 'foo',
    fontTypes: ['a', 'b'],
    assetTypes: ['c', 'd'],
    formatOptions: { svg: { foo: 'bar' } },
    pathOptions: { css: '/dev/null' },
    codepoints: { foo: 'bar' },
    fontHeight: 1,
    descent: 2,
    normalize: true,
    round: 3,
    selector: null,
    tag: 'f',
    prefix: 'baz',
    fontsUrl: '/fonts',
    templates: {
        css: 'css',
        sass: 'sass',
        scss: 'scss',
        html: 'html'
    }
};
var testError = function (options, key, message) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, expect(function () { return config_parser_1.parseConfig(__assign(__assign({}, mockConfig), options)); }).rejects.toThrow("Invalid option " + key + ": " + message)];
    });
}); };
var testParsed = function (key, input, output) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _a = expect;
                return [4 /*yield*/, config_parser_1.parseConfig(__assign(__assign({}, mockConfig), (_b = {}, _b[key] = input, _b)))];
            case 1: return [2 /*return*/, _a.apply(void 0, [(_c.sent())[key]]).toEqual(output)];
        }
    });
}); };
describe('Config parser', function () {
    beforeEach(function () {
        checkPathMock.mockClear();
        checkPathMock.mockImplementation(function () { return Promise.resolve(true); });
    });
    test('returns correctly parsed input when valid', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, config_parser_1.parseConfig(__assign({}, mockConfig))];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual(__assign({}, mockConfig));
                    return [2 /*return*/];
            }
        });
    }); });
    test('correctly parses acceptable values', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, testParsed('descent', undefined, undefined)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, testParsed('descent', '1', 1)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, testParsed('normalize', 'true', true)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, testParsed('normalize', '1', true)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, testParsed('normalize', 1, true)];
                case 5:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('throws expected validation errors when given invalid input', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, testError({ inputDir: 2 }, 'inputDir', '2 is not a string')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, testError({ inputDir: {} }, 'inputDir', '[object Object] is not a string')];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, testError({ name: 3 }, 'name', '3 is not a string')];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, testError({ fontTypes: ['x'] }, 'fontTypes', 'x is not valid - accepted values are: a, b')];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, testError({ assetTypes: ['x'] }, 'assetTypes', 'x is not valid - accepted values are: c, d')];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, testError({ descent: 'a' }, 'descent', 'a is not a valid number')];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, testError({ normalize: null }, 'normalize', 'must be a boolean value')];
                case 7:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('correctly validates existance of input and output paths', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    checkPathMock.mockImplementationOnce(function () { return Promise.resolve(false); });
                    return [4 /*yield*/, testError({ inputDir: 'foo' }, 'inputDir', 'foo is not a directory')];
                case 1:
                    _a.sent();
                    checkPathMock.mockImplementation(function (val) { return Promise.resolve(val !== 'bar'); });
                    return [4 /*yield*/, testError({ outputDir: 'bar' }, 'outputDir', 'bar is not a directory')];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('throws expected error when passing an unrecognised option', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, expect(function () {
                        return config_parser_1.parseConfig(__assign(__assign({}, mockConfig), { foo: 'bar' }));
                    }).rejects.toThrow("The option 'foo' is not recognised")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=config-parser.js.map
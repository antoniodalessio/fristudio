"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var runner_1 = require("../runner");
var assets_1 = require("../../utils/assets");
var generators_1 = require("../../generators");
var generator_options_1 = require("../../generators/generator-options");
var config_parser_1 = require("../config-parser");
var constants_1 = require("../../constants");
var generateAssetsMock = generators_1.generateAssets;
var parseConfigMock = config_parser_1.parseConfig;
var writeAssetsMock = assets_1.writeAssets;
var loadAssetsMock = assets_1.loadAssets;
var getGeneratorOptionsMock = generator_options_1.getGeneratorOptions;
jest.mock('../../constants', function () { return ({
    DEFAULT_OPTIONS: { hasDefaults: true, parsed: false }
}); });
jest.mock('../../generators', function () { return ({
    generateAssets: jest.fn(function (options) {
        return Promise.resolve({ mockGenerated: { assets: {}, options: options } });
    })
}); });
jest.mock('../../generators/generator-options', function () { return ({
    getGeneratorOptions: jest.fn(function () { return ({ mock: 'generator-options' }); })
}); });
jest.mock('../../utils/assets', function () { return ({
    writeAssets: jest.fn(function () { return Promise.resolve([{ mock: 'writeResult' }]); }),
    loadAssets: jest.fn(function () { return Promise.resolve({ mock: 'assets' }); })
}); });
jest.mock('../config-parser', function () { return ({
    parseConfig: jest.fn(function (config) {
        if (config === void 0) { config = {}; }
        return (__assign(__assign({}, config), { parsed: true }));
    })
}); });
describe('Runner', function () {
    beforeEach(function () {
        writeAssetsMock.mockClear();
        loadAssetsMock.mockClear();
        generateAssetsMock.mockClear();
        parseConfigMock.mockClear();
        getGeneratorOptionsMock.mockClear();
    });
    test('`generateFonts` resolves with expected results', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn, optionsOut, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    optionsIn = { inputDir: 'foo' };
                    optionsOut = { hasDefaults: true, parsed: true, inputDir: 'foo' };
                    _a = expect;
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual({
                        options: optionsOut,
                        writeResults: [],
                        assetsIn: { mock: 'assets' },
                        assetsOut: {
                            mockGenerated: {
                                assets: {},
                                options: { mock: 'generator-options' }
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` resolves with asset write result if `outputDir` was passed', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn, optionsOut, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    optionsIn = { inputDir: 'foo', outputDir: 'foo' };
                    optionsOut = {
                        hasDefaults: true,
                        parsed: true,
                        inputDir: 'foo',
                        outputDir: 'foo'
                    };
                    _a = expect;
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual({
                        options: optionsOut,
                        writeResults: [{ mock: 'writeResult' }],
                        assetsIn: { mock: 'assets' },
                        assetsOut: {
                            mockGenerated: { assets: {}, options: { mock: 'generator-options' } }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` throws error if `outputDir` is not given and `mustWrite` is `true`', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { inputDir: 'foo' };
                    return [4 /*yield*/, expect(function () { return runner_1.generateFonts(optionsIn, true); }).rejects.toThrow('You must specify an output directory')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` throws error if `inputDir` is not given', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = {};
                    return [4 /*yield*/, expect(function () { return runner_1.generateFonts(optionsIn); }).rejects.toThrow('You must specify an input directory')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` calls `parseConfig` correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { inputDir: 'foo', foo: 'bar' };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(parseConfigMock).toHaveBeenCalledTimes(1);
                    expect(parseConfigMock).toHaveBeenCalledWith(__assign(__assign({}, constants_1.DEFAULT_OPTIONS), optionsIn));
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` calls `loadAssets` correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var inputDir, optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    inputDir = '/dev/in';
                    optionsIn = { inputDir: inputDir };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(loadAssetsMock).toHaveBeenCalledTimes(1);
                    expect(loadAssetsMock).toHaveBeenCalledWith(inputDir);
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` calls `getGeneratorOptions` correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { inputDir: '/dev/in' };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(getGeneratorOptionsMock).toHaveBeenCalledTimes(1);
                    expect(getGeneratorOptionsMock).toHaveBeenCalledWith({
                        hasDefaults: true,
                        inputDir: '/dev/in',
                        parsed: true
                    }, { mock: 'assets' });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` calls `generateAssets` correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { inputDir: 'foo', foo: 'bar' };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(generateAssetsMock).toHaveBeenCalledTimes(1);
                    expect(generateAssetsMock).toHaveBeenCalledWith({
                        mock: 'generator-options'
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` calls `writeAssets` correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { outputDir: 'foo/bar', inputDir: 'foo' };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(writeAssetsMock).toHaveBeenCalledTimes(1);
                    expect(writeAssetsMock).toHaveBeenCalledWith({ mockGenerated: { assets: {}, options: { mock: 'generator-options' } } }, { hasDefaults: true, inputDir: 'foo', outputDir: 'foo/bar', parsed: true });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`generateFonts` does not call `writeAssets` if `outputDir` is not specified', function () { return __awaiter(void 0, void 0, void 0, function () {
        var optionsIn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    optionsIn = { inputDir: 'foo' };
                    return [4 /*yield*/, runner_1.generateFonts(optionsIn)];
                case 1:
                    _a.sent();
                    expect(writeAssetsMock).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=runner.js.map
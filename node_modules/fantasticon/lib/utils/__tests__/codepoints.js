"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var constants_1 = require("../../constants");
var codepoints_1 = require("../codepoints");
var mockAssetsMap = function (ids) {
    if (ids === void 0) { ids = ['foo', 'bar', 'test']; }
    return ids.reduce(function (cur, id) {
        var _a;
        if (cur === void 0) { cur = {}; }
        return (__assign(__assign({}, cur), (_a = {}, _a[id] = { id: id, relativePath: '...', absolutePath: '...' }, _a)));
    }, {});
};
describe('CodePoints utilities', function () {
    test('`DEFAULT_START_CODEPOINT` is defined and valid', function () {
        expect(constants_1.DEFAULT_START_CODEPOINT).toBeTruthy();
        expect(typeof constants_1.DEFAULT_START_CODEPOINT).toBe('number');
    });
    test('`getCodepoints` produces expectetd output with default arguments', function () {
        expect(codepoints_1.getCodepoints(mockAssetsMap())).toEqual({
            foo: constants_1.DEFAULT_START_CODEPOINT,
            bar: constants_1.DEFAULT_START_CODEPOINT + 1,
            test: constants_1.DEFAULT_START_CODEPOINT + 2
        });
    });
    test('`getCodepoints` uses given start codepoint', function () {
        expect(codepoints_1.getCodepoints(mockAssetsMap(), {}, 10)).toEqual({
            foo: 10,
            bar: 11,
            test: 12
        });
    });
    test('`getCodepoints` correctly merges predefined codepoints with generated ones', function () {
        var predefined = { buzz: 20, bazz: 21 };
        expect(codepoints_1.getCodepoints(mockAssetsMap(), predefined, 10)).toEqual({
            foo: 10,
            bar: 11,
            test: 12,
            buzz: 20,
            bazz: 21
        });
    });
    test('`getCodepoints` skips codepoints already used in the predefined map', function () {
        var predefined = { buzz: 10, bazz: 12 };
        expect(codepoints_1.getCodepoints(mockAssetsMap(), predefined, 10)).toEqual({
            foo: 11,
            bar: 13,
            test: 14,
            buzz: 10,
            bazz: 12
        });
    });
});
//# sourceMappingURL=codepoints.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var validation_1 = require("../validation");
var fs_async_1 = require("../fs-async");
var checkPathMock = fs_async_1.checkPath;
jest.mock('../fs-async', function () { return ({ checkPath: jest.fn() }); });
describe('Cli utilities', function () {
    test('`parseNumeric` returns correctly parsed number', function () {
        for (var _i = 0, _a = [
            ['10', 10],
            ['.5', 0.5],
            ['10.0', 10],
            [' 2 ', 2]
        ]; _i < _a.length; _i++) {
            var _b = _a[_i], input = _b[0], output = _b[1];
            expect(validation_1.parseNumeric(input)).toBe(output);
        }
    });
    test('`parseNumeric` throws an error when given a non-numeric value', function () {
        var _loop_1 = function (value) {
            expect(function () { return validation_1.parseNumeric(value); }).toThrow(value + " is not a valid number");
        };
        for (var _i = 0, _a = ['a', {}, undefined, true, false, null]; _i < _a.length; _i++) {
            var value = _a[_i];
            _loop_1(value);
        }
    });
    test('`parseString` returns its unchanged input when given a string', function () {
        for (var _i = 0, _a = ['a', 'foobar', '  ']; _i < _a.length; _i++) {
            var value = _a[_i];
            expect(validation_1.parseString(value)).toBe(value);
        }
    });
    test('`parseString` throws an error when given a non-string value', function () {
        var _loop_2 = function (value) {
            expect(function () { return validation_1.parseString(value); }).toThrow(value + " is not a string");
        };
        for (var _i = 0, _a = [1, true, {}, undefined, null, false]; _i < _a.length; _i++) {
            var value = _a[_i];
            _loop_2(value);
        }
    });
    test('`listMembersParser` throws correct error when given values outside the given list', function () {
        var fn = validation_1.listMembersParser(['a', 'b', 'c']);
        expect(function () { return fn(['d']); }).toThrowError('d is not valid - accepted values are: a, b, c');
    });
    test('`listMembersParser` returns the previews array plus the new value if accepted', function () {
        var fn = validation_1.listMembersParser(['a', 'b', 'c']);
        expect(fn(['a', 'b'])).toEqual(['a', 'b']);
    });
    test('`removeUndefined` removes keys in an Object mapped to `undefined` values', function () {
        expect(validation_1.removeUndefined({
            a: 1,
            b: '2',
            c: undefined,
            d: null,
            e: false,
            f: true,
            g: [],
            h: {},
            i: undefined
        })).toMatchObject({ a: 1, b: '2', d: null, e: false, f: true, g: [], h: {} });
    });
    test('`parseBoolean` correctly parses boolean-like values', function () {
        for (var _i = 0, _a = [
            ['0', false],
            ['1', true],
            [0, false],
            [1, true],
            ['true', true],
            ['false', false],
            [true, true],
            [false, false]
        ]; _i < _a.length; _i++) {
            var _b = _a[_i], input = _b[0], output = _b[1];
            expect(validation_1.parseBoolean(input)).toBe(output);
        }
    });
    test('`parseBoolean` throws correct error when given non boolean like values', function () {
        var _loop_3 = function (input) {
            expect(function () { return validation_1.parseBoolean(input); }).toThrow('must be a boolean value');
        };
        for (var _i = 0, _a = ['a', 2, -1, '2', {}, [], '', undefined, null]; _i < _a.length; _i++) {
            var input = _a[_i];
            _loop_3(input);
        }
    });
    test('`nullable` wraps another parser and skips it if given value is null', function () {
        var parse = validation_1.nullable(validation_1.parseString);
        expect(parse(null)).toBeNull();
        expect(function () { return parse(2); }).toThrow('2 is not a string');
        expect(function () { return parse(undefined); }).toThrow('undefined is not a string');
    });
    test('`optional` wraps another parser and skips it if given value is undefined', function () {
        var parse = validation_1.optional(validation_1.parseString);
        expect(parse(undefined)).toBeUndefined();
        expect(function () { return parse(2); }).toThrow('2 is not a string');
        expect(function () { return parse(null); }).toThrow('null is not a string');
    });
    test('`parseDir` calls `checkPath` correctly and returns unchanged path if found to be an existing directory', function () { return __awaiter(void 0, void 0, void 0, function () {
        var dirname, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    dirname = '/foo/bar';
                    checkPathMock.mockImplementationOnce(function () { return Promise.resolve(true); });
                    _a = expect;
                    return [4 /*yield*/, validation_1.parseDir(dirname)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(dirname);
                    expect(checkPathMock).toHaveBeenCalledTimes(1);
                    expect(checkPathMock).toHaveBeenCalledWith(dirname, 'directory');
                    return [2 /*return*/];
            }
        });
    }); });
    test('`parseDir` throws expected error if given path is found not to be a directory', function () { return __awaiter(void 0, void 0, void 0, function () {
        var dirname;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    dirname = '/foo/bar';
                    checkPathMock.mockImplementationOnce(function () { return Promise.resolve(false); });
                    return [4 /*yield*/, expect(function () { return validation_1.parseDir(dirname); }).rejects.toThrow('/foo/bar is not a directory')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=validation.js.map
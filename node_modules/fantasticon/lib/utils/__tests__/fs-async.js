"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var fs_async_1 = require("../fs-async");
var fs = __importStar(require("fs"));
var readFileMock = fs.readFile;
var writeFileMock = fs.writeFile;
var statMock = fs.stat;
jest.mock('fs', function () { return ({
    readFile: jest.fn(),
    writeFile: jest.fn(),
    stat: jest.fn()
}); });
describe('Async FS utilities', function () {
    beforeEach(function () {
        readFileMock.mockClear();
        writeFileMock.mockClear();
        statMock.mockClear();
    });
    test('`readFile` is `fs.readFile` correctly promisified', function () { return __awaiter(void 0, void 0, void 0, function () {
        var filepath, encoding, result, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    filepath = '/dev/null';
                    encoding = 'utf8';
                    result = '::result::';
                    readFileMock.mockImplementation(function (_, __, cb) { return cb(null, result); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.readFile(filepath, encoding)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(result);
                    expect(readFileMock).toHaveBeenCalledTimes(1);
                    expect(readFileMock).toHaveBeenCalledWith(filepath, encoding, expect.any(Function));
                    return [2 /*return*/];
            }
        });
    }); });
    test('`writeFile` is `fs.writeFile` correctly promisified', function () { return __awaiter(void 0, void 0, void 0, function () {
        var filepath, content, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    filepath = '/dev/null';
                    content = '::content::';
                    writeFileMock.mockImplementation(function (_, __, cb) { return cb(null); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.writeFile(filepath, content)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(undefined);
                    expect(writeFileMock).toHaveBeenCalledTimes(1);
                    expect(writeFileMock).toHaveBeenCalledWith(filepath, content, expect.any(Function));
                    return [2 /*return*/];
            }
        });
    }); });
    test('`stat` is `fs.stat` correctly promisified', function () { return __awaiter(void 0, void 0, void 0, function () {
        var filepath, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    filepath = '/dev/null';
                    statMock.mockImplementation(function (_, cb) { return cb(null); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.stat(filepath)];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toBe(undefined);
                    expect(statMock).toHaveBeenCalledTimes(1);
                    expect(statMock).toHaveBeenCalledWith(filepath, expect.any(Function));
                    return [2 /*return*/];
            }
        });
    }); });
    test('`checkPath` will call `stat` correctly and correctly check the existance of a path', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPath, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    mockPath = '/dev/null';
                    statMock.mockImplementationOnce(function (_, cb) { return cb(); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath)];
                case 1:
                    _a.apply(void 0, [_c.sent()]).toBe(true);
                    expect(statMock).toHaveBeenCalledTimes(1);
                    expect(statMock).toHaveBeenCalledWith(mockPath, expect.any(Function));
                    statMock.mockClear();
                    statMock.mockImplementationOnce(function (_, cb) { return cb(new Error('Fail')); });
                    _b = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath)];
                case 2:
                    _b.apply(void 0, [_c.sent()]).toBe(false);
                    expect(statMock).toHaveBeenCalledTimes(1);
                    expect(statMock).toHaveBeenCalledWith(mockPath, expect.any(Function));
                    return [2 /*return*/];
            }
        });
    }); });
    test('`checkPath` will correctly check if given path is a directory when given as check type', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPath, isDirectory, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    mockPath = '/dev/null';
                    isDirectory = jest.fn(function () { return false; });
                    statMock.mockImplementation(function (_, cb) { return cb(null, { isDirectory: isDirectory }); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath, 'directory')];
                case 1:
                    _a.apply(void 0, [_c.sent()]).toBe(false);
                    expect(statMock).toHaveBeenCalledTimes(1);
                    expect(statMock).toHaveBeenCalledWith(mockPath, expect.any(Function));
                    expect(isDirectory).toHaveBeenCalledTimes(1);
                    isDirectory.mockImplementation(function () { return true; });
                    _b = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath, 'directory')];
                case 2:
                    _b.apply(void 0, [_c.sent()]).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
    test('`checkPath` will correctly check if given path is a file when given as check type', function () { return __awaiter(void 0, void 0, void 0, function () {
        var mockPath, isFile, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    mockPath = '/dev/null';
                    isFile = jest.fn(function () { return false; });
                    statMock.mockImplementation(function (_, cb) { return cb(null, { isFile: isFile }); });
                    _a = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath, 'file')];
                case 1:
                    _a.apply(void 0, [_c.sent()]).toBe(false);
                    expect(statMock).toHaveBeenCalledTimes(1);
                    expect(statMock).toHaveBeenCalledWith(mockPath, expect.any(Function));
                    expect(isFile).toHaveBeenCalledTimes(1);
                    isFile.mockImplementation(function () { return true; });
                    _b = expect;
                    return [4 /*yield*/, fs_async_1.checkPath(mockPath, 'file')];
                case 2:
                    _b.apply(void 0, [_c.sent()]).toBe(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=fs-async.js.map
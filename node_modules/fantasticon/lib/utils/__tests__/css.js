"use strict";
exports.__esModule = true;
var css_1 = require("../css");
var misc_1 = require("../../types/misc");
jest.mock('path');
jest.mock('../hash', function () { return ({
    getHash: function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return "::hashed(" + values.join('|') + ")::";
    }
}); });
describe('CSS utilities', function () {
    test('`renderSrcOptions` outputs expected string for all handled font types', function () {
        var font = Buffer.from('::font-content::');
        var options = {
            fontTypes: Object.values(misc_1.FontAssetType),
            name: 'my-font'
        };
        expect(css_1.renderSrcAttribute(options, font)).toEqual([
            'url("./my-font.eot?::hashed(::font-content::)::#iefix") format("embedded-opentype"),',
            'url("./my-font.woff2?::hashed(::font-content::)::") format("woff2"),',
            'url("./my-font.woff?::hashed(::font-content::)::") format("woff"),',
            'url("./my-font.ttf?::hashed(::font-content::)::") format("truetype"),',
            'url("./my-font.svg?::hashed(::font-content::)::#my-font") format("svg")'
        ].join('\n'));
    });
    test('`renderSrcOptions` only renders given font types', function () {
        var font = '::font-content::';
        var options = {
            fontTypes: [misc_1.FontAssetType.EOT, misc_1.FontAssetType.SVG],
            name: 'my-font'
        };
        expect(css_1.renderSrcAttribute(options, font)).toEqual([
            'url("./my-font.eot?::hashed(::font-content::)::#iefix") format("embedded-opentype"),',
            'url("./my-font.svg?::hashed(::font-content::)::#my-font") format("svg")'
        ].join('\n'));
    });
    test('`renderSrcOptions` uses the `fontsUrl` option when given', function () {
        var font = '::font-content::';
        var options = {
            fontTypes: [misc_1.FontAssetType.TTF],
            name: 'my-font',
            fontsUrl: '/fonts'
        };
        expect(css_1.renderSrcAttribute(options, font)).toEqual('url("/fonts/my-font.ttf?::hashed(::font-content::)::") format("truetype")');
    });
});
//# sourceMappingURL=css.js.map
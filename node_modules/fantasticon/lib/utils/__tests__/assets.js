"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var assets_1 = require("../assets");
var fs_async_1 = require("../../utils/fs-async");
var writeFileMock = fs_async_1.writeFile;
jest.mock('path');
jest.mock('glob');
jest.mock('../../utils/fs-async', function () { return ({
    writeFile: jest.fn(function () { return Promise.resolve(); })
}); });
describe('Assets utilities', function () {
    beforeEach(function () {
        writeFileMock.mockClear();
    });
    test('`loadPaths` returns a Promise that resolves with an Array of `strings`', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, paths;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = assets_1.loadPaths('./valid');
                    expect(result).toBeInstanceOf(Promise);
                    return [4 /*yield*/, result];
                case 1:
                    paths = _a.sent();
                    expect(paths).toBeInstanceOf(Array);
                    expect(paths.length).toBeTruthy();
                    paths.forEach(function (path) { return expect(typeof path).toBe('string'); });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`loadPaths` resolves an Array of the correct filepaths within the given directory', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, assets_1.loadPaths('./valid')];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual([
                        '/project/valid/foo.svg',
                        '/project/valid/bar.svg',
                        '/project/valid/sub/nested.svg',
                        '/project/valid/sub/sub/nested.svg'
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
    test('`loadPaths` throws when given an invalid glob', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, expect(assets_1.loadPaths('./invalid')).rejects.toEqual(new Error('Invalid glob: ./invalid/**/*.svg'))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('`loadPaths` throws when path contains no SVG assets', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, expect(assets_1.loadPaths('./empty')).rejects.toEqual(new Error('No SVGs found in ./empty'))];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    test('`loadAssets` resolves a key - value map of assets with expected properties', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, assets_1.loadAssets('./valid')];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual({
                        foo: {
                            relativePath: 'foo.svg',
                            absolutePath: '/root/project/valid/foo.svg',
                            id: 'foo'
                        },
                        bar: {
                            relativePath: 'bar.svg',
                            absolutePath: '/root/project/valid/bar.svg',
                            id: 'bar'
                        },
                        'sub-nested': {
                            relativePath: 'sub/nested.svg',
                            absolutePath: '/root/project/valid/sub/nested.svg',
                            id: 'sub-nested'
                        },
                        'sub-sub-nested': {
                            relativePath: 'sub/sub/nested.svg',
                            absolutePath: '/root/project/valid/sub/sub/nested.svg',
                            id: 'sub-sub-nested'
                        }
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    test('`writeAssets` calls writeFile for each given asset with correctly formed filepath and content', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, assets_1.writeAssets({ svg: '::svg-content::', foo: '::foo-content::' }, {
                        name: 'base-name',
                        outputDir: '/dev/null'
                    })];
                case 1:
                    _a.sent();
                    expect(writeFileMock).toHaveBeenCalledTimes(2);
                    expect(writeFileMock).toHaveBeenCalledWith('/dev/null/base-name.svg', '::svg-content::');
                    expect(writeFileMock).toHaveBeenCalledWith('/dev/null/base-name.foo', '::foo-content::');
                    return [2 /*return*/];
            }
        });
    }); });
    test('`writeAssets` outputs to a different directory if `pathOptions` are specified for an asset type', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, assets_1.writeAssets({ svg: '::svg-content::', foo: '::foo-content::' }, {
                        name: 'base-name',
                        outputDir: '/dev/null',
                        pathOptions: { foo: 'custom-path/to-file.ts' }
                    })];
                case 1:
                    _a.sent();
                    expect(writeFileMock).toHaveBeenCalledTimes(2);
                    expect(writeFileMock).toHaveBeenCalledWith('/dev/null/base-name.svg', '::svg-content::');
                    expect(writeFileMock).toHaveBeenCalledWith('custom-path/to-file.ts', '::foo-content::');
                    return [2 /*return*/];
            }
        });
    }); });
    test('`writeAssets` returns an object containing information on written assets', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, assets_1.writeAssets({ svg: '::svg-content::', foo: '::foo-content::' }, {
                            name: 'base-name',
                            outputDir: '/dev/null',
                            pathOptions: { foo: 'custom-path/to-file.ts' }
                        })];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual([
                        { writePath: '/dev/null/base-name.svg', content: '::svg-content::' },
                        { writePath: 'custom-path/to-file.ts', content: '::foo-content::' }
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=assets.js.map